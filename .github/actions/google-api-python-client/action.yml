name: google-api-python-client

inputs:
  owner:
    required: true
  channel_id:
    required: true
  google_api:
    required: true
  notify:
    required: false
    default: true

  ## secrets
  TELEGRAM_TOKEN:
    required: false
  TELEGRAM_TO:
    required: false

runs:
  using: "composite"
  steps:
    - name: Checkout repo
      uses: actions/checkout@v2

    - name: Setting up python
      uses: actions/setup-python@v2

    - name: Installing python modules
      shell: bash
      run: |
        pip install --upgrade pip
        pip install -r ./.github/actions/google-api-python-client/requirements.txt

    - name: Checking
      shell: bash
      run: |
        last_file=./last-files/${{ inputs.owner }}
        error_file=./last-files/${{ inputs.owner }}_error
        titles_file=./last-files/${{ inputs.owner }}_titles
        echo "last_file=$last_file" >> $GITHUB_ENV
        echo "error_file=$error_file" >> $GITHUB_ENV
        echo "titles_file=$titles_file" >> $GITHUB_ENV

        [ -f "$last_file" ] || {
          printf '%s does not exist\n' "$last_file"
          exit 1
        }

        count_last="$(< "$last_file")"

        ./.github/actions/google-api-python-client/check-with-google-api-python-client.py \
          --count-last="$count_last" \
          --channel-id=${{ inputs.channel_id }} \
          --last-file="$last_file" \
          --error-file="$error_file" \
          --titles-file="$titles_file" \
          --api-key=${{ inputs.google_api }}

    - name: Checking for new videos or errors
      id: newvideo-error
      shell: bash
      run: |
        ## get titles if any
        if [ -f ${{ env.titles_file }} ]; then
          ## JUMP_1 save a multi-line variable into $GITHUB_ENV:
          echo 'msg_text<<EOF' >> $GITHUB_ENV
          cat ${{ env.titles_file }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          echo "::set-output name=found::true"
        fi

        ## get errors if any
        if [ -f ${{ env.error_file }} ]; then
          ## JUMP_1 save a multi-line variable into $GITHUB_ENV:
          echo 'msg_text<<EOF' >> $GITHUB_ENV
          cat ${{ env.error_file }} >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

          echo "::set-output name=found::true"
        fi

    - name: Notifying
      if: ${{ steps.newvideo-error.outputs.found == 'true' && inputs.notify == 'true' }}
      uses: davoudarsalani/action-notify@master
      with:
        telegram_message: |
          ${{ inputs.owner }}
          ${{ env.msg_text }}
        TELEGRAM_TOKEN: ${{ inputs.TELEGRAM_TOKEN }}
        TELEGRAM_TO: ${{ inputs.TELEGRAM_TO }}

    - name: Committing changes
      if: ${{ steps.newvideo-error.outputs.found == 'true' }}
      uses: davoudarsalani/action--git-push@master
      with:
        file_pattern: ${{ env.last_file }}
